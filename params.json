{"tagline":"C client library for the RabbitMQ broker","google":"","body":"# RabbitMQ C AMQP client library\r\n\r\n[![Build Status](https://secure.travis-ci.org/alanxz/rabbitmq-c.png?branch=master)](http://travis-ci.org/alanxz/rabbitmq-c)\r\n\r\n## Introduction\r\n\r\nThis is a C-language AMQP client library for use with AMQP servers\r\nspeaking protocol versions 0-9-1.\r\n\r\n - <http://www.rabbitmq.com/>\r\n - <http://www.amqp.org/>\r\n - <http://github.com/alanxz/rabbitmq-c>\r\n\r\nAnnouncements regarding the library are periodically made on the\r\nRabbitMQ mailing list and on the RabbitMQ blog.\r\n\r\n - <http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss>\r\n - <http://www.rabbitmq.com/blog/>\r\n\r\n## Retrieving the code\r\n\r\nIn addition to the source code for this library, you will require a\r\ncopy of `rabbitmq-codegen`, which resides in the `codegen` directory\r\nas a git submodule. To update the submodule(s):\r\n\r\n    git clone git://github.com/alanxz/rabbitmq-c.git\r\n    cd rabbitmq-c\r\n    git submodule init\r\n    git submodule update\r\n\r\nYou will also need a recent python with the simplejson module\r\ninstalled, and the GNU autotools (autoconf, automake, libtool etc.),\r\nor as an alternative CMake.\r\n\r\n## Building the code\r\n\r\n### Using autoconf\r\n\r\nOnce you have all the prerequisites, change to the `rabbitmq-c`\r\ndirectory and run\r\n\r\n    autoreconf -i\r\n\r\nto run the GNU autotools and generate the configure script, followed\r\nby\r\n\r\n    ./configure\r\n    make\r\n\r\nto build the `librabbitmq` library and the example programs.\r\n\r\n### Using cmake\r\n\r\nYou will need CMake (v2.6 or better): http://cmake.org/\r\n\r\nYou will need a working python install (2.6+) with the json or simplejson\r\nmodules installed.\r\n\r\nYou will need to do the git submodule init/update as above.\r\nAlternatively you can clone the rabbitmq-codegen repository and point\r\ncmake to it using the RABBITMQ_CODEGEN_DIR cmake variable\r\n\r\nCreate a binary directory in a sibling directory from the directory\r\nyou cloned the rabbitmq-c repository\r\n\r\n    mkdir bin-rabbitmq-c\r\n\r\nRun CMake in the binary directory\r\n\r\n    cmake /path/to/source/directory\r\n\r\nBuild it:\r\n\r\n* On linux: `make`\r\n* On win32: `nmake` or `msbuild`, or open it in visual studio and\r\n  build from there\r\n\r\nThings you can pass to cmake to change the build:\r\n\r\n* `-DRABBITMQ_CODEGEN_DIR=/path/to/rabbitmq-codegen/checkout` - if you\r\n   have your codegen directory in a different place [Default is\r\n   sibiling directory to source]\r\n* `-DBUILD_TOOLS=OFF` build the programs in the tools directory\r\n    [Default is ON if the POPT library can be found]\r\n\r\nOther interesting flags to pass to CMake (see cmake docs for more info)\r\n\r\n* `-DCMAKE_BUILD_TYPE` - specify the type of build (Debug or Release)\r\n* `-DCMAKE_INSTALL_PREFIX` - specify where the install target puts files\r\n\r\n## Running the examples\r\n\r\nArrange for a RabbitMQ or other AMQP server to be running on\r\n`localhost` at TCP port number 5672.\r\n\r\nIn one terminal, run\r\n\r\n    ./examples/amqp_listen localhost 5672 amq.direct test\r\n\r\nIn another terminal,\r\n\r\n    ./examples/amqp_sendstring localhost 5672 amq.direct test \"hello world\"\r\n\r\nYou should see output similar to the following in the listener's\r\nterminal window:\r\n\r\n    Result 1\r\n    Frame type 1, channel 1\r\n    Method AMQP_BASIC_DELIVER_METHOD\r\n    Delivery 1, exchange amq.direct routingkey test\r\n    Content-type: text/plain\r\n    ----\r\n    00000000: 68 65 6C 6C 6F 20 77 6F : 72 6C 64                 hello world\r\n    0000000B:\r\n\r\n## Writing applications using `librabbitmq`\r\n\r\nPlease see the `examples` directory for short examples of the use of\r\nthe `librabbitmq` library.\r\n\r\n### Threading\r\n\r\nYou cannot share a socket, an `amqp_connection_state_t`, or a channel\r\nbetween threads using `librabbitmq`. The `librabbitmq` library is\r\nbuilt with event-driven, single-threaded applications in mind, and\r\ndoes not yet cater to any of the requirements of `pthread`ed\r\napplications.\r\n\r\nYour applications instead should open an AMQP connection (and an\r\nassociated socket, of course) per thread. If your program needs to\r\naccess an AMQP connection or any of its channels from more than one\r\nthread, it is entirely responsible for designing and implementing an\r\nappropriate locking scheme. It will generally be much simpler to have\r\na connection exclusive to each thread that needs AMQP service.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"rabbitmq-c"}